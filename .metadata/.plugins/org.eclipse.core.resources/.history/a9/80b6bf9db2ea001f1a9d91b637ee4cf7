package com.ToDoList.controller;

package com.example.todo.controller;

import com.example.todo.dto.TaskDTO;
import com.example.todo.dto.UserDTO;
import com.example.todo.model.TaskModel;
import com.example.todo.model.UserModel;
import com.example.todo.repository.TaskRepository;
import com.example.todo.repository.UserRepository;
import com.example.todo.service.TaskService;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/tasks")
public class TaskController {

    private final TaskRepository taskRepository;
    private final UserRepository userRepository;
    private final TaskService taskService;

    public TaskController(TaskRepository taskRepository, UserRepository userRepository, TaskService taskService) {
        this.taskRepository = taskRepository;
        this.userRepository = userRepository;
        this.taskService = taskService;
    }

    // GET all tasks (Now returns DTOs)
    @GetMapping
    public List<TaskDTO> getAllTasks() {
        List<TaskModel> tasks = taskRepository.findAll();
        return tasks.stream().map(taskService::convertToTaskDTO).collect(Collectors.toList());
    }

    // GET a task by ID (Now returns DTO)
    @GetMapping("/{id}")
    public TaskDTO getTaskById(@PathVariable Long id) {
        Optional<TaskModel> task = taskRepository.findById(id);
        return task.map(taskService::convertToTaskDTO).orElse(null);
    }

    // GET user by ID (Now returns DTO)
    @GetMapping("/user/{id}")
    public UserDTO getUserById(@PathVariable Long id) {
        Optional<UserModel> user = userRepository.findById(id);
        return user.map(taskService::convertToUserDTO).orElse(null);
    }
}
