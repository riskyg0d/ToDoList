package com.ToDoList.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.ToDoList.model.LoginRequest;
import com.ToDoList.model.SignupRequest; // Assuming this class exists to handle signup requests
import com.ToDoList.model.UserModel;
import com.ToDoList.service.AuthService;
import com.ToDoList.util.JwtUtil;
import com.ToDoList.service.UserService;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/auth")
public class AuthController {

    @Autowired
    private AuthenticationManager authenticationManager;

    @Autowired
    private JwtUtil jwtUtil;

    @Autowired
    private UserService userService; // Service to handle user operations

    @Autowired
    private PasswordEncoder passwordEncoder; // Password encoder for signup

    // Signup Method (POST)
    @PostMapping("/signup")
    public ResponseEntity<String> signup(@RequestBody SignupRequest signupRequest) {
        // Check if user already exists
        if (userService.existsByUsername(signupRequest.getUsername())) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Username is already taken");
        }

        // Create new user and encode password
        UserModel newUser = new UserModel();
        newUser.setUsername(signupRequest.getUsername());
        newUser.setPassword(passwordEncoder.encode(signupRequest.getPassword()));

        // Save user to the database
        userService.saveUser(newUser);

        return ResponseEntity.status(HttpStatus.CREATED).body("User registered successfully!");
    }

    // Login Method (POST)
    @PostMapping("/login")
    public ResponseEntity<Map<String, String>> login(@RequestBody LoginRequest loginRequest) {
        try {
            // Attempt to authenticate the user
            authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword())
            );

            // If authentication is successful, generate the JWT token
            String token = jwtUtil.generateToken(loginRequest.getUsername());

            // Return the token
            Map<String, String> response = new HashMap<>();
            response.put("token", token);

            return ResponseEntity.ok(response);

        } catch (BadCredentialsException e) {
            // If authentication fails, return 403 Forbidden
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(Map.of("error", "Invalid credentials"));
        }
    }
}
